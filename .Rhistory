pi_2 <- m_g[2]/sum(m_g)
# update parameters
# length parameter
l_1 <- sum(r_j1*ML_solutions$.)/m_g[1]
l_2 <- sum(r_j2*ML_solutions$.)/m_g[2]
# update sigma_f
s_1 <- 1 #sum(r_j1*ML_solutions$V2)/m_g[1]
s_2 <- 1 #sum(r_j2*ML_solutions$V2)/m_g[2]
# new likelihood:
dat_log_like[i] <- log_like_mixture(data_1, N, K, t, l_1, l_2, pi_1, pi_2,
s_1, s_2)
}
# store values:
final_data_tofino <- data.frame(cbind(resp_matrix, dat_log_like))
final_data_tofino
data_1 <- tofino_seasoned
# set dimensions:
N <- nrow(data_1)
t <- 1:N
# optimize GP hyperparameters:
ML_solutions <- tofino_l_opt %>% as.data.frame()
ML_solutions
# create one hot encoding matrix:
resp_matrix <- permutations(2,10,0:1,repeats.allowed=TRUE)
# intialize vector:
complete_likelihood <- 1:nrow(resp_matrix)
# first compute L1 and L2
for (i in 1:nrow(resp_matrix) ) {
# Set complete assignment:
r_j1 <- resp_matrix[3, ]
r_j2 <- 1-r_j1
# estimate params:
# calculate m_g, m
m_g <- 1:2
m_g[1] <- sum(r_j1)
m_g[2] <- sum(r_j2)
l_1 <- sum(r_j1*ML_solutions$.)/m_g[1]
l_2 <- sum(r_j2*ML_solutions$.)/m_g[2]
pi_1 <- mean(r_j1)
pi_2 <- mean(r_j2)
s_1 <- 1
s_2 <- 1
# compute complete data likelihood:
# two likelihoods:
like_1 <- apply(data_1, MARGIN = 2, dmvnorm, mean = rep(0, N),
sigma = get_sigmad(K, t, s_1, l_1))
like_2 <- apply(data_1, MARGIN = 2, dmvnorm, mean = rep(0, N),
sigma = get_sigmad(K, t, s_2, l_2))
# compute complete data like:
complete_likelihood[i] <- prod(like_1*pi_1*r_j1 + like_2*pi_2*r_j2)
}
tofino_complete <- data.frame(cbind(resp_matrix, complete_likelihood))
tofino_complete
resp_matrix
resp_matrix[3, ]
# first compute L1 and L2
for (i in 1:nrow(resp_matrix) ) {
# Set complete assignment:
r_j1 <- resp_matrix[i, ]
r_j2 <- 1-r_j1
# estimate params:
# calculate m_g, m
m_g <- 1:2
m_g[1] <- sum(r_j1)
m_g[2] <- sum(r_j2)
l_1 <- sum(r_j1*ML_solutions$.)/m_g[1]
l_2 <- sum(r_j2*ML_solutions$.)/m_g[2]
pi_1 <- mean(r_j1)
pi_2 <- mean(r_j2)
s_1 <- 1
s_2 <- 1
# compute complete data likelihood:
# two likelihoods:
like_1 <- apply(data_1, MARGIN = 2, dmvnorm, mean = rep(0, N),
sigma = get_sigmad(K, t, s_1, l_1))
like_2 <- apply(data_1, MARGIN = 2, dmvnorm, mean = rep(0, N),
sigma = get_sigmad(K, t, s_2, l_2))
# compute complete data like:
complete_likelihood[i] <- prod(like_1*pi_1*r_j1 + like_2*pi_2*r_j2)
}
tofino_complete <- data.frame(cbind(resp_matrix, complete_likelihood))
tofino_complete
summary(tofino_complete)
tofino_complete[which.max(tofino_complete$complete_likelihood),]
tofino_complete[which.max(tofino_complete$complete_likelihood[-1]),]
# data_1 <- van_seasoned
data_1 <- tofino_seasoned
# set dimensions:
N <- nrow(data_1)
t <- 1:N
# optimize GP hyperparameters:
ML_solutions <- tofino_l_opt   %>% as.data.frame()
# create one hot encoding matrix:
resp_matrix <- permutations(2,10,0:1,repeats.allowed=TRUE)
# intialize vector:
dat_log_like <- 1:nrow(resp_matrix)
# loop through values:
for (i in 1:nrow(resp_matrix) ) {
# cluster 1 responsibilities
r_j1 <- resp_matrix[i, ]
# cluster 2 responsibilities
r_j2 <- 1-r_j1
# calculate m_g, m
m_g <- 1:2
m_g[1] <- sum(r_j1)
m_g[2] <- sum(r_j2)
# calculate pi_g
pi_1 <- m_g[1]/sum(m_g)
pi_2 <- m_g[2]/sum(m_g)
# update parameters
# length parameter
l_1 <- sum(r_j1*ML_solutions$.)/m_g[1]
l_2 <- sum(r_j2*ML_solutions$.)/m_g[2]
# update sigma_f
s_1 <- 1 #sum(r_j1*ML_solutions$V2)/m_g[1]
s_2 <- 1 #sum(r_j2*ML_solutions$V2)/m_g[2]
# new likelihood:
dat_log_like[i] <- log_like_mixture(data_1, N, K, t, l_1, l_2, pi_1, pi_2,
s_1, s_2)
}
# store values:
final_data_tofino <- data.frame(cbind(resp_matrix, dat_log_like))
final_data_tofino
final_data_tofino[which.max(final_data_tofino$dat_log_like),]
dim(final_data_tofino)
tofino_l_opt
get_gradiented_l <- function(y, l, x){
y <- y
x <- x
L_1 <- l
S_1 <- 1
N <- 12
continue <- TRUE
while(continue){
# old <- dmvnorm(y, mean=rep(0, N),
#                get_sigmad(K, x, S_1, L_1),
#                log=T)
# compute log likelihood:
Sigma <- get_sigmad(K, x, S_1, L_1)
K_inverse <- FastGP::rcppeigen_invert_matrix(Sigma)
old <- (-1/2)*(y %*% K_inverse %*% y + log(det(Sigma)) + N*log(2*pi))
#
# temp variables:
move_by_l <- gradient(L_1, x, y, S_1)
L_1 <- L_1 + .001*move_by_l
# new <- dmvnorm(y, mean = rep(0, N),
#                get_sigmad(K, x, S_1, L_1),
#                log = T)
Sigma <- get_sigmad(K, x, S_1, L_1)
K_inverse <- FastGP::rcppeigen_invert_matrix(Sigma)
new <-  (-1/2)*(y %*% K_inverse %*% y + log(det(Sigma)) + N*log(2*pi))
# print(c(L_1, S_1, new))
continue <- abs(new-old) > .00000001
}
return(c(L_1, S_1, new) )
}
### apply to data:
############# Run full search:
tofino_l_opt <-  numeric(0)
for (year in colnames(tofino_seasoned)) {
y <- tofino_seasoned[,year]
x <- x
L_1 <- 1
S_1 <- 1
tofino_l_opt <-  c(tofino_l_opt,get_gradiented_l(y,L_1,x)[1])
}
y
y <- tofino_seasoned[,1]
x <- x
L_1 <- 1
S_1 <- 1
out <-  get_gradiented_l(y,L_1,x)
out
get_gradiented_l <- function(y, l, x){
y <- y
x <- x
L_1 <- l
S_1 <- 1
N <- 12
continue <- TRUE
while(continue){
# old <- dmvnorm(y, mean=rep(0, N),
#                get_sigmad(K, x, S_1, L_1),
#                log=T)
# compute log likelihood:
Sigma <- get_sigmad(K, x, S_1, L_1)
K_inverse <- FastGP::rcppeigen_invert_matrix(Sigma)
old <- (-1/2)*(y %*% K_inverse %*% y + log(det(Sigma)) + N*log(2*pi))
#
# temp variables:
move_by_l <- gradient(L_1, x, y, S_1)
L_1 <- L_1 + .001*move_by_l
# new <- dmvnorm(y, mean = rep(0, N),
#                get_sigmad(K, x, S_1, L_1),
#                log = T)
Sigma <- get_sigmad(K, x, S_1, L_1)
K_inverse <- FastGP::rcppeigen_invert_matrix(Sigma)
new <-  (-1/2)*(y %*% K_inverse %*% y + log(det(Sigma)) + N*log(2*pi))
print(new)
continue <- abs(new-old) > .00000001
}
return(c(L_1, S_1, new) )
}
out <-  get_gradiented_l(y,L_1,x)
out
L = seq(from=0, to=2, by=0.5)
L
for(i in L){
print(i)
}
L_1 <- i
c(tofino_l_opt,c(L_1, get_gradiented_l(y,L_1,x)[1]))
L_1
L_1
get_gradiented_l(y,L_1,x)
y <- tofino_seasoned[,year]
x <- x
L_1 <- i
S_1 <- 1
get_gradiented_l(y,L_1,x)
L_1 <- 1
get_gradiented_l(y,L_1,x)
get_gradiented_l(y,L_1,x)[1]
c(L_1, get_gradiented_l(y,L_1,x))
for(i in L){
y <- tofino_seasoned[,year]
x <- x
L_1 <- i
S_1 <- 1
tofino_l_opt <-  c(tofino_l_opt,c(L_1, get_gradiented_l(y,L_1,x)))
}
L_1
get_gradiented_l <- function(y, l, x){
y <- y
x <- x
L_1 <- l
S_1 <- 1
N <- 12
continue <- TRUE
while(continue){
# old <- dmvnorm(y, mean=rep(0, N),
#                get_sigmad(K, x, S_1, L_1),
#                log=T)
# compute log likelihood:
Sigma <- get_sigmad(K, x, S_1, L_1)
K_inverse <- FastGP::rcppeigen_invert_matrix(Sigma)
old <- (-1/2)*(y %*% K_inverse %*% y + log(det(Sigma)) + N*log(2*pi))
#
# temp variables:
move_by_l <- gradient(L_1, x, y, S_1)
L_1 <- L_1 + .001*move_by_l
# new <- dmvnorm(y, mean = rep(0, N),
#                get_sigmad(K, x, S_1, L_1),
#                log = T)
Sigma <- get_sigmad(K, x, S_1, L_1)
K_inverse <- FastGP::rcppeigen_invert_matrix(Sigma)
new <-  (-1/2)*(y %*% K_inverse %*% y + log(det(Sigma)) + N*log(2*pi))
print(new)
continue <- abs(new-old) > .00000001
}
return(c(L_1, S_1, new) )
}
L_1
get_gradiented_l(y,L_1,x)
L_1 <- 0.8
get_gradiented_l(y,L_1,x)
?tryCatch
y <- tofino_seasoned[,year]
y
x <- x
x
L_1 <- 1
S_1 <- 1
res = c()
tryCatch(
expr={
res = get_gradiented_l(y,L_1,x)
},
error = function(e){
print(e)
res <<- c(NA, 1, NA)
}
)
res
c(tofino_l_opt,c(L_1, res))
tofino_l_opt
c(L_1, res)
### apply to data:
############# Run full search:
tofino_l_opt <-  numeric(0)
rbind(tofino_l_opt,c(L_1, res))
rbind(tofino_l_opt,c(L_1, res))
tofino_l_opt
tofino_l_opt <-  rbind(tofino_l_opt,c(L_1, res))
tofino_l_opt <-  rbind(tofino_l_opt,c(L_1, res))
tofino_l_opt
for(i in L)
i in L
### apply to data:
############# Run full search:
tofino_l_opt <-  c("L_start", "L_final", "S", "Likelihood")
L = seq(from=0, to=2, by=0.5)
for(i in L){
y <- tofino_seasoned[,year]
x <- x
L_1 <- 1
S_1 <- 1
res = c()
tryCatch(
expr={
res = get_gradiented_l(y,L_1,x)
},
error = function(e){
print(e)
res <<- c(NA, 1, NA)
}
)
tofino_l_opt <-  rbind(tofino_l_opt,c(L_1, res))
}
tofino_l_opt = data.frame(tofino_l_opt)
tofino_l_opt
for(i in L){
y <- tofino_seasoned[,year]
x <- x
L_1 <- i
S_1 <- 1
res = c()
tryCatch(
expr={
res = get_gradiented_l(y,L_1,x)
},
error = function(e){
print(e)
res <<- c(NA, 1, NA)
}
)
tofino_l_opt <-  rbind(tofino_l_opt,c(L_1, res))
}
tofino_l_opt = data.frame(tofino_l_opt)
tofino_l_opt
### apply to data:
############# Run full search:
tofino_l_opt <-  c("L_start", "L_final", "S", "Likelihood")
L = seq(from=0, to=2, by=0.5)
for(i in L){
y <- tofino_seasoned[,year]
x <- x
L_1 <- i
S_1 <- 1
res = c()
tryCatch(
expr={
res = get_gradiented_l(y,L_1,x)
},
error = function(e){
print(e)
res <<- c(NA, 1, NA)
}
)
tofino_l_opt <-  rbind(tofino_l_opt,c(L_1, res))
}
L_1
tofino_l_opt = data.frame(tofino_l_opt)
tofino_l_opt
L = seq(from=0, to=2, by=0.1)
L = seq(from=0, to=2, by=0.1)
for(i in L){
y <- tofino_seasoned[,year]
x <- x
L_1 <- i
S_1 <- 1
res = c()
tryCatch(
expr={
res = get_gradiented_l(y,L_1,x)
},
error = function(e){
print(e)
res <<- c(NA, 1, NA)
}
)
tofino_l_opt <-  rbind(tofino_l_opt,c(L_1, res))
}
tofino_l_opt
year
### apply to data:
############# Run full search:
tofino_l_opt <-  c("Year","L_start", "L_final", "S", "Likelihood")
L = seq(from=0, to=2, by=0.1)
for(i in L){
y <- tofino_seasoned[,year]
x <- x
L_1 <- i
S_1 <- 1
res = c()
tryCatch(
expr={
res = get_gradiented_l(y,L_1,x)
},
error = function(e){
print(e)
res <<- c(NA, 1, NA)
}
)
tofino_l_opt <-  rbind(tofino_l_opt,c(year, L_1, res))
}
tofino_l_opt
### apply to data:
############# Run full search:
tofino_l_opt <-  c("Year","L_start", "L_final", "S", "Likelihood")
L = seq(from=0, to=2, by=0.5)
for (year in colnames(tofino_seasoned)) {
for(i in L){
y <- tofino_seasoned[,year]
x <- x
L_1 <- i
S_1 <- 1
res = c()
tryCatch(
expr={
res = get_gradiented_l(y,L_1,x)
},
error = function(e){
print(e)
res <<- c(NA, 1, NA)
}
)
tofino_l_opt <-  rbind(tofino_l_opt,c(year, L_1, res))
}
}
tofino_l_opt
get_gradiented_l <- function(y, l, x){
y <- y
x <- x
L_1 <- l
S_1 <- 1
N <- 12
continue <- TRUE
while(continue){
# old <- dmvnorm(y, mean=rep(0, N),
#                get_sigmad(K, x, S_1, L_1),
#                log=T)
# compute log likelihood:
Sigma <- get_sigmad(K, x, S_1, L_1)
K_inverse <- FastGP::rcppeigen_invert_matrix(Sigma)
old <- (-1/2)*(y %*% K_inverse %*% y + log(det(Sigma)) + N*log(2*pi))
#
# temp variables:
move_by_l <- gradient(L_1, x, y, S_1)
L_1 <- L_1 + .001*move_by_l
# new <- dmvnorm(y, mean = rep(0, N),
#                get_sigmad(K, x, S_1, L_1),
#                log = T)
Sigma <- get_sigmad(K, x, S_1, L_1)
K_inverse <- FastGP::rcppeigen_invert_matrix(Sigma)
new <-  (-1/2)*(y %*% K_inverse %*% y + log(det(Sigma)) + N*log(2*pi))
#print(new)
continue <- abs(new-old) > .00000001
}
return(c(L_1, S_1, new) )
}
### apply to data:
############# Run full search:
tofino_l_opt <-  c("Year","L_start", "L_final", "S", "Likelihood")
L = seq(from=0, to=2, by=0.01)
for (year in colnames(tofino_seasoned)) {
for(i in L){
y <- tofino_seasoned[,year]
x <- x
L_1 <- i
S_1 <- 1
res = c()
tryCatch(
expr={
res = get_gradiented_l(y,L_1,x)
},
error = function(e){
print(e)
res <<- c(NA, 1, NA)
}
)
tofino_l_opt <-  rbind(tofino_l_opt,c(year, L_1, res))
}
}
tofino_l_opt
### apply to data:
############# Run full search:
tofino_l_opt <-  c("Year","L_start", "L_final", "S", "Likelihood")
L = seq(from=0, to=2, by=0.01)
for (year in colnames(tofino_seasoned)) {
for(i in L){
y <- tofino_seasoned[,year]
x <- x
L_1 <- i
S_1 <- 1
res = c()
tryCatch(
expr={
res = get_gradiented_l(y,L_1,x)
},
error = function(e){
print(e)
res <<- c(NA, 1, NA)
}
)
tofino_l_opt <-  rbind(tofino_l_opt,c(year, L_1, res))
}
}
tofino_l_opt
save(tofino_l_opt,"tofino_l_opt.RData")
save(tofino_l_opt,file="tofino_l_opt.RData")
tofino_l_opt
